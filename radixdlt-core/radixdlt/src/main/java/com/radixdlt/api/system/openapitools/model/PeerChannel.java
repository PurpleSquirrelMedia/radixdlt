/*
 * Radix System API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.system.openapitools.model;;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * PeerChannel
 */
@JsonPropertyOrder({
        PeerChannel.JSON_PROPERTY_TYPE,
        PeerChannel.JSON_PROPERTY_IS_PROXIED,
        PeerChannel.JSON_PROPERTY_LOCAL_PORT,
        PeerChannel.JSON_PROPERTY_IP,
        PeerChannel.JSON_PROPERTY_URI
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-04T13:24:31.581096766+01:00[Europe/Warsaw]")
public class PeerChannel {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    IN("IN"),

    OUT("OUT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_IS_PROXIED = "is_proxied";
  private Boolean isProxied;

  public static final String JSON_PROPERTY_LOCAL_PORT = "local_port";
  private Integer localPort;

  public static final String JSON_PROPERTY_IP = "ip";
  private String ip;

  public static final String JSON_PROPERTY_URI = "uri";
  private String uri;

  public PeerChannel type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PeerChannel isProxied(Boolean isProxied) {
    this.isProxied = isProxied;
    return this;
  }

  /**
   * Get isProxied
   * @return isProxied
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_IS_PROXIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsProxied() {
    return isProxied;
  }


  @JsonProperty(JSON_PROPERTY_IS_PROXIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsProxied(Boolean isProxied) {
    this.isProxied = isProxied;
  }


  public PeerChannel localPort(Integer localPort) {
    this.localPort = localPort;
    return this;
  }

  /**
   * Get localPort
   * @return localPort
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LOCAL_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLocalPort() {
    return localPort;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocalPort(Integer localPort) {
    this.localPort = localPort;
  }


  public PeerChannel ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIp() {
    return ip;
  }


  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIp(String ip) {
    this.ip = ip;
  }


  public PeerChannel uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Get uri
   * @return uri
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUri() {
    return uri;
  }


  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUri(String uri) {
    this.uri = uri;
  }


  /**
   * Return true if this PeerChannel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeerChannel peerChannel = (PeerChannel) o;
    return Objects.equals(this.type, peerChannel.type) &&
            Objects.equals(this.isProxied, peerChannel.isProxied) &&
            Objects.equals(this.localPort, peerChannel.localPort) &&
            Objects.equals(this.ip, peerChannel.ip) &&
            Objects.equals(this.uri, peerChannel.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, isProxied, localPort, ip, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeerChannel {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isProxied: ").append(toIndentedString(isProxied)).append("\n");
    sb.append("    localPort: ").append(toIndentedString(localPort)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
